@model SocialMedia.Application.Features.Post.Command.UpdatePostCommand

<h1 class="my-4">Update Post</h1>

<form asp-action="UpdatePost" method="post" enctype="multipart/form-data">
    @Html.AntiForgeryToken()
    <div asp-validation-summary="All" class="text-danger"></div>

    <input type="hidden" asp-for="PostId" />

    <div class="form-group mb-3">
        <label asp-for="Content" class="form-label">What do you want to change?</label>
        <textarea asp-for="Content" class="form-control" rows="3"></textarea>
        <span asp-validation-for="Content" class="text-danger"></span>
    </div>

    <div class="form-group mb-3">
        @if (Model.ExistingImages.Any())
        {
            <label class="form-label">Current Images</label>
            <div id="existing-image-container" class="d-flex flex-wrap mt-2 mb-3">
                @foreach (var image in Model.ExistingImages)
                {
                    <div style="position: relative; margin: 5px;">
                        <img src="@image.ImagePath" class="img-thumbnail" style="max-width: 100px;" />
                    </div>
                }
            </div>
        }

        <label class="form-label">Replace with New Images</label>
        <input asp-for="Images" type="file" id="image-input" class="form-control" multiple style="display: none;" />

        <button type="button" id="add-image-btn" class="btn btn-secondary">Choose New Files</button>

        <div id="image-preview-container" class="d-flex flex-wrap mt-2"></div>
    </div>
    <button type="submit" class="btn btn-primary mt-3">Update Post</button>
</form>

@section Scripts {
    <partial name="_ValidationScriptsPartial" />
    <script>
        document.addEventListener("DOMContentLoaded", function() {
            const imageInput = document.getElementById('image-input');
            const addImageBtn = document.getElementById('add-image-btn');
            const previewContainer = document.getElementById('image-preview-container');
            const form = document.querySelector('form');

            let fileStore = new DataTransfer();

            addImageBtn.addEventListener('click', function() {
                imageInput.click();
            });

            imageInput.addEventListener('change', function(event) {
                // For an update form, we clear the old selection completely to replace images
                fileStore = new DataTransfer();
                for (let i = 0; i < event.target.files.length; i++) {
                    fileStore.items.add(event.target.files[i]);
                }
                renderPreviews();
                event.target.value = ''; // Clear input to allow re-selecting the same file
            });

            function renderPreviews() {
                previewContainer.innerHTML = '';
                Array.from(fileStore.files).forEach((file, i) => {
                    const reader = new FileReader();
                    reader.onload = function(e) {
                        const previewWrapper = document.createElement('div');
                        previewWrapper.style.position = 'relative';
                        previewWrapper.style.margin = '5px';

                        const img = document.createElement('img');
                        img.src = e.target.result;
                        img.style.maxWidth = '100px';
                        img.classList.add('img-thumbnail');

                        const removeBtn = document.createElement('button');
                        removeBtn.innerHTML = '&times;';
                        removeBtn.type = 'button';
                        removeBtn.style.position = 'absolute';
                        removeBtn.style.top = '0';
                        removeBtn.style.right = '0';
                        removeBtn.classList.add('btn', 'btn-danger', 'btn-sm');

                        removeBtn.addEventListener('click', function() {
                            const newFileStore = new DataTransfer();
                            let currentFiles = Array.from(fileStore.files);
                            currentFiles.splice(i, 1);
                            currentFiles.forEach(file => newFileStore.items.add(file));
                            fileStore = newFileStore;
                            renderPreviews();
                        });

                        previewWrapper.appendChild(img);
                        previewWrapper.appendChild(removeBtn);
                        previewContainer.appendChild(previewWrapper);
                    }
                    reader.readAsDataURL(file);
                });
            }

            form.addEventListener('submit', function(event) {
                event.preventDefault();

                const formData = new FormData(form);
                formData.delete('Images');

                Array.from(fileStore.files).forEach(file => {
                    formData.append('Images', file, file.name);
                });

                const token = form.querySelector('input[name="__RequestVerificationToken"]').value;

                fetch(form.action, {
                    method: 'POST',
                    body: formData,
                    headers: {
                        'RequestVerificationToken': token
                    }
                }).then(response => {
                    if (response.ok && response.redirected) {
                        window.location.href = response.url;
                    } else {
                        // Reload to show server validation errors if submission fails
                        window.location.reload();
                    }
                }).catch(error => {
                    console.error('Error submitting form:', error);
                });
            });
        });
    </script>
}